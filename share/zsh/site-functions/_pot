#compdef pot

: ${POT_FS_ROOT:=$( pot config -qg fs_root )}

_pot_pots() {
        _values "pot pots" ${${(f)"$(${service} ls -qp)"}%% *}
}

_pot_run_pots() {
        _values "pot pots" ${${(f)"$(${service} ps -q)"}%% *}
}

_pot_bases() {
        _values "pot pots" ${${(f)"$(${service} ls -qb)"}%% *}
}

_pot_fscomps() {
        _values "pot flavors" ${${(f)"$(${service} ls -qf)"}%% *}
}

_pot_flavours() {
        _values "pot flavors" ${${(f)"$(${service} ls -qF)"}%% *}
}

_pot() {
	_arguments \
		'1: :_pot_cmds' \
		'*:: :->args'

	case $state in
		args)
			case $words[1] in
				init|vnet-start)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]'
					;;
				config) 
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-q[Quiet output]' \
						'-g[Element name]:config element name:(fs_root zfs_root gateway syslogd)'
					;;
				de-init) 
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-f[Force stop of all running pots]'
					;;
				version) 
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-q[Quiet output]'
					;;
				list|ls)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[List pots]' \
						'-b[List bases]' \
						'-f[List fscomps]' \
						'-F[List flavours]' \
						'-a[List them all]'
					;;
				info)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-q[Quiet output]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-r[Check if the pos is running]'
					;;
				show)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-a[All pots]' \
						'-r[All running pots]' \
						'-p[pot name]:pot name:_pot_pots'
					;;
				create-base) 
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-r[Release number]:supported releases:(10.1 10.3 10.4 11.0 11.1)'
					;;
				create-fscomp) 
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-f[fscomp name]::_normal'
					;;
				create)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_normal' \
						'-P[pot reference]:pot reference name:_pot_pots' \
						'-b[base version]:base version:_pot_bases' \
						'-l[pot level]:level:(0 1 2)' \
						'-i[network config]::_normal' \
						'-s[static ip]' \
						'-d[dns type]:dns types:(inherit pot)' \
						'-f[flavour name]:flavour name:_pot_flavours' \
						'-F[avoid default flavour]'
					;;
				clone-fscomp)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-f[fscomp name]::_normal' \
						'-F[fscomp reference]:fscomp reference name:_pot_fscomps'
					;;
				clone)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]::_normal' \
						'-P[pot reference]:pot reference name:_pot_pots' \
						'-i[network config]::_normal' \
						'-f[force snapshot of the pot reference]' 
					;;
				promote)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_pot_pots'
					;;
				rename)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-n[pot new name]::_normal' \
						'-p[pot old name]:pot old name:_pot_pots'
					;;
				destroy)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-f[Force the pot to stop]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-b[base name]:base name:_pot_bases' \
						'-r[Recursive destroying]'
					;;
				add-fscomp)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-f[fscomp name]:fscomp name:_pot_fscomps' \
						'-m[Mountpoint]::_normal' \
						'-e[External dataset]' \
						'-w[Move ZFS mountpoint]' \
						'-r[Read-only]'
					;;
				add-dep)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-P[dependency pot name]:dependency pot name:_pot_pots'
					;;
				set-rss)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-C[Cpuset config]::_normal' \
						'-M[Memory size]::_normal'
					;;
				snap|snapshot|revert|rollback)
					_arguments \
						'-h[Show help]' \
						'-v[Verbose output]' \
						'-p[pot name]:pot name:_pot_pots' \
						'-f[fscomp name]:fscomp name:_pot_fscomps' \
						'-a[also external components]'
					;;
				stop)
					_arguments '1:pot name:_pot_run_pots'
					;;
				start|term|run)
					_arguments '1:pot name:_pot_pots'
					;;
			esac
			case "$state" in
				pot_names)
					_files -/ -W "${POT_FS_ROOT}/jails/" -S' '
					;;
				fscomp_names)
					_files -/ -W "${POT_FS_ROOT}/fscomp/" -S' '
					;;
				base_names)
					_files -/ -W "${POT_FS_ROOT}/bases/" -S' '
					;;
			esac
	esac
}

_pot_cmds() {
	local -a commands;
	commands=(
	'help:Show help'
	'version:Show version'
	'config:Show config values'
	'ls:List elements'
	'list:List elements'
	'show:Show pot resources'
	'info:Show info on pot'
	'init:Init ZFS'
	'de-init:Remove all ZFS datasets'
	'vnet-start:Start the vnet configuration'
	'create-base:Create a new base image'
	'create-fscomp:Create a new fs component'
	'create:Create a new pot'
	'clone:Clone a pot'
	'clone-fscomp:Clone a fs component'
	'promote:Promote a cloned pot'
	'rename:Rename a pot'
	'destroy:Destroy a pot'
	'add-fscomp:Add a fs component to a pot'
	'add-dep:Add a dependency to a pot'
	'set-rss:Set a resource constraint to a pot'
	'start:Start a pot'
	'stop:Stop a pot'
	'run:Start a pot and open a shell in it'
	'term:Open a shell in a pot'
	'snap:Take a snapshot of a pot'
	'snapshot:Take a snapshot of a pot'
	'revert:Restore the last snapshot of a pot'
	'rollback:Restore the last snapshot of a pot'
	)
	_describe 'command' commands
}

_pot
